---
title: "ESG Benchmarking Dashboard"
execute: 
  echo: false
format:
   dashboard:
     logo: ../02_images/BCID_V_rgb_rev.png
     nav-buttons:
        icon: github
        href: https://github.com/bcgov-c/esg-dashboard
     self-contained: true
     css: ../03_styles/styles.css
     theme: ../03_styles/fonts.scss
     fontcolor: "#2d2d2d"
---

```{r license}
# Copyright 2024 Province of British Columbia
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
```

```{r packages}
#| output: false
library(tidyverse)
library(plotly)
library(scales)
library(janitor)
library(lubridate)
library(crosstalk)
library(htmltools)
library(DT)
```

```{r data}
source("../01_data/data.R")

## crosstalk data
shared_data <- SharedData$new(summary_data)
```

# Summary

## {.sidebar}

### Table Filters
\


```{js}
// code to remove the "All" category from filter_select as it doesn't work as expected
function remove_all_option() {
    document.getElementById("category").getElementsByClassName("selectized")[0].selectize.removeOption("");
    document.getElementById("industry").getElementsByClassName("selectized")[0].selectize.removeOption("");
    document.getElementById("metric").getElementsByClassName("selectized")[0].selectize.removeOption("");
    document.getElementById("year").getElementsByClassName("selectized")[0].selectize.removeOption("");
}
    
window.onload = remove_all_option;
```


```{r}

filter_select("category", "Category:", shared_data, ~Category, multiple = TRUE)
filter_select("industry", "Industry:", shared_data, ~Industry, multiple = TRUE)
filter_select("metric", "Key Metric:", shared_data, ~`Key Metric`, multiple = TRUE)
filter_select("year", "Year:", shared_data, ~Year, multiple = TRUE)

```


## Column

```{r}

DT::datatable(shared_data,
              escape = FALSE,
              rownames = FALSE,
              option = list(dom = "t")
              )
```

# Environment

##  {.sidebar width="18%"}

### Information

[Switch between tabs in the top row to view the proportion of energy use and GHG emissions by fuel source.]{.small-body}

[Click and drag your mouse over the charts to zoom in]{.small-body}

[Expand the charts by hovering over the bottom right corner and click on the icon.]{.small-body}

[See additional chart options by hovering over the top right corner, such as save chart as png and turn on data value hovers]{.small-body}

::: {.callout-note collapse="true"}
### Notes

The fuel source charts do not give a complete picture as they do not include data from manufacturing.

The industry charts do not include data for agriculture or manufacturing sector as it is not available.
:::

\

::: {.callout-note collapse="true"}
### Sources

[Government of BC](https://www2.gov.bc.ca/gov/content/environment/climate-change/data/industrial-facility-ghg)

[Natural Resources Canada](https://oee.nrcan.gc.ca/corporate/statistics/neud/dpa/menus/trends/comprehensive/trends_agg_bct.cfm)
:::

## Column {width="82%"}

### Row {.tabset height="60%"}

```{r line-use-perc}
#| title: Energy Use by Fuel Source (%)
#| warning: false

plot_data <- line_data %>%
  filter(Topic == "Energy Use") %>%
  mutate(Date = ymd(paste0(Year, "-01-01")))

plot_ly(data = plot_data,
        x = ~Date,
        y = ~Value,
        color = ~Variable,
        type = "scatter",
        mode = "lines+markers",
        text = ~ paste0(Variable, ": ", percent(Value, accuracy = 0.1)),
        textposition = "none",
        hovertemplate = "%{x} %{text}<extra></extra>") %>%
  layout(yaxis = list(title = "", tickformat = "0%"),
         xaxis = list(title = "", hoverformat = "%Y", tickformat = "%Y"),
         legend = list(orientation = "h"),
         hovermode = FALSE, ## can turn hover on with menu option on live chart
         modebar = list(remove = list("autoscale","hoverCompareCartesian", "lasso", "pan", 
                                   "resetscale", "select", "zoom", "zoomin", "zoomout")),
         margin = list(l = 0))
```

```{r line-ghg-perc}
#| title: GHG Emissions by Fuel Source (%)
#| warning: false

plot_data <- line_data %>%
  filter(Topic == "GHG Emissions") %>%
  mutate(Date = ymd(paste0(Year, "-01-01")))#,
         #Value = round_half_up(100*Value, digits = 1))

# hchart(plot_data, "line", hcaes(x = Date, y = Value, group = Variable))%>%
#   hc_yAxis(labels = list(format = "{value}%"), title = "") %>%
#   hc_xAxis(title = "")
  # hc_legend(align ='right',
  #           verticalAlign = 'top',
  #           layout = 'vertical') ## bad for mobile

plot_ly(data = plot_data,
        x = ~Date,
        y = ~Value,
        color = ~Variable,
        type = "scatter",
        mode = "lines+markers",
        text = ~ paste0(Variable, ": ", percent(Value, accuracy = 0.1)),
        textposition = "none",
        hovertemplate = "%{x} %{text}<extra></extra>") %>%
  layout(yaxis = list(title = "", tickformat = "0%"),
         xaxis = list(title = "", hoverformat = "%Y", tickformat = "%Y"),
         legend = list(orientation = "h"),
         hovermode = FALSE, ## can turn hover on with menu option on live chart
         modebar = list(remove = list("autoscale","hoverCompareCartesian", "lasso", "pan", 
                                   "resetscale", "select", "zoom", "zoomin", "zoomout")),
         margin = list(l = 0))

```

### Row {height="40%"}

#### Column

```{r bar-use-peremp}
#| title: Diverted waste as % of Total Non-Hazardous Waste - B.C.

plot_ly(diverted_perc %>% mutate(Date = ymd(paste0(Year, "-01-01"))),
        x = ~Date,
        y = ~Value,
        type = "scatter",
        mode = "lines+markers",
        text = ~paste0(Year, ": ", percent(round_half_up(Value,3), accuracy = 0.1)),
        textposition = "none",
        hovertemplate = "%{text}<extra></extra>") %>%
    layout(yaxis = list(title = "", tickformat = "0%"),
           xaxis = list(title = "", hoverformat = "%Y", tickformat = "%Y"),
           hovermode = FALSE, ## can turn hover on with menu option on live chart
           modebar = list(remove = list("autoscale","hoverCompareCartesian", "lasso", 
                                        "pan", "resetscale", "select", "zoom", "zoomin", "zoomout")),
           margin = list(l = 0)
    )
```

#### Column

```{r bar-use-perc}
#| title: Non-residential Waste as % of Total Non-hazardous Waste - B.C.

data <- bar_data %>%
  filter(str_detect(Indicator, "%"))

plot_ly(nonres_perc %>% mutate(Date = ymd(paste0(Year, "-01-01"))),
        x = ~Date,
        y = ~Value,
        type = "scatter",
        mode = "lines+markers",
        text = ~paste0(Year, ": ", percent(round_half_up(Value,3), accuracy = 0.1)),
        textposition = "none",
        hovertemplate = "%{text}<extra></extra>") %>%
    layout(yaxis = list(title = "", tickformat = "0%"),
           xaxis = list(title = "", hoverformat = "%Y", tickformat = "%Y"),
           hovermode = FALSE, ## can turn hover on with menu option on live chart
           modebar = list(remove = list("autoscale","hoverCompareCartesian", "lasso", 
                                        "pan", "resetscale", "select", "zoom", "zoomin", "zoomout")),
           margin = list(l = 0)
    )
```

# Social

##  {.sidebar width="18%"}

### Sidebar

## Column {width="82%"}

Main content

# Governance

##  {.sidebar width="18%"}

### Sidebar

## Column {width="82%"}

Main content

# Data

## Row {.tabset}

::: {.card title="Environment"}
#### Fuel Source Data

```{r}
datatable(line_data %>% rename(`Fuel Source` = Variable))
```

#### Industry Data

```{r}
datatable(bar_data %>% rename(`Industry` = Variable))
```
:::

::: {.card title="Social"}
Social Data
:::

::: {.card title="Governance"}
Governance Data
:::

# About
